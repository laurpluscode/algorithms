
#o(n^2)
#Selction Sort
test_array = [1,4,5,6]
def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i + 1,len(arr)):
            if arr[j] > arr[min_index]:
                min_index = j
        arr[i],arr[min_index] = arr[min_index], arr[i]
    return arr

print(selection_sort(test_array))

#o(n^2)
Bubble sort
arr = [2,1,6,9,7,3]
def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - i - 1):
            if arr[j] < arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1],arr[j]
    return arr

print(bubble_sort(arr))

#insertion sort
#o(n^2)
def insertion_sort(arr):
    for i in range(1,len(arr)):
        key = arr[i]
        j = i - 1

        while j >= 0 and key > arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

print(insertion_sort(arr))

#Merge sort
# o(n log n)
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    middle = len(arr) // 2
    return merged_arrays(merge_sort(arr[:middle]), merge_sort(arr[middle:]))

def merged_arrays(left_arr,right_arr):
    merged_array = []
    i = j = 0
    while i < len(left_arr) or j < len(right_arr):
       if i == len(left_arr):
           merged_array.append(right_arr[j])
           j += 1
           continue
       if j == len(right_arr):
           merged_array.append(left_arr[i])
           i += 1
           continue
       if left_arr[i] >= right_arr[j]:
           merged_array.append(left_arr[i])
           i += 1
           continue
       else:
           merged_array.append(right_arr[j])
           j += 1

    return merged_array
